{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useMemo } from \"react\";\nexport const DOTS = \"...\";\nconst range = (start, end) => {\n  let length = end - start + 1;\n  return Array.from({\n    length\n  }, (_, index) => index + start);\n};\nexport const usePaginationRange = ({\n  totalPageCount,\n  buttonConst,\n  siblingCount,\n  currentPage\n}) => {\n  _s();\n  const paginationRange = useMemo(() => {\n    const totalPageNumbers = buttonConst + 2 + siblingCount;\n    if (totalPageNumbers >= totalPageCount) {\n      return range(1, totalPageCount);\n    }\n    const leftSiblingIndex = Math.max(currentPage - siblingCount, 1);\n    const rightSiblingIndex = Math.min(currentPage + siblingCount, totalPageCount);\n    const shouldShowLeftDots = leftSiblingIndex > 2;\n    const shouldShowRightDots = rightSiblingIndex <= totalPageCount - 2;\n    const firstPageIndex = 1;\n    const lastPageIndex = totalPageCount;\n    if (!shouldShowLeftDots && shouldShowRightDots) {\n      let leftItemCount = 3 + 2 * siblingCount;\n      let leftRange = range(1, leftItemCount);\n      return [...leftRange, DOTS, totalPageCount];\n    }\n    if (shouldShowLeftDots && !shouldShowRightDots) {\n      let rightItemCount = 3 + 2 * siblingCount;\n      let rightRange = range(totalPageCount - rightItemCount + 1, totalPageCount);\n      return [firstPageIndex, DOTS, ...rightRange];\n    }\n    if (shouldShowLeftDots && shouldShowRightDots) {\n      let middleRange = range(leftSiblingIndex, rightSiblingIndex);\n      return [firstPageIndex, DOTS, ...middleRange, DOTS, lastPageIndex];\n    }\n  }, [totalPageCount, siblingCount, currentPage, buttonConst]);\n  return paginationRange;\n};\n_s(usePaginationRange, \"tLviJI6rwkyze3+kNwkFLwjvB48=\");","map":{"version":3,"names":["useMemo","DOTS","range","start","end","length","Array","from","_","index","usePaginationRange","totalPageCount","buttonConst","siblingCount","currentPage","_s","paginationRange","totalPageNumbers","leftSiblingIndex","Math","max","rightSiblingIndex","min","shouldShowLeftDots","shouldShowRightDots","firstPageIndex","lastPageIndex","leftItemCount","leftRange","rightItemCount","rightRange","middleRange"],"sources":["/home/soanitech/Manil-component/src/hooks/usePaginationHook/usePaginationRange.ts"],"sourcesContent":["import { useMemo } from \"react\";\nimport { usePaginationRangeProps } from \"./usePaginationRange.type\";\n\nexport const DOTS = \"...\";\nconst range = (start: number, end: number) => {\n  let length = end - start + 1;\n  return Array.from({ length }, (_, index) => index + start);\n};\n\nexport const usePaginationRange = ({\n  totalPageCount,\n  buttonConst,\n  siblingCount,\n  currentPage,\n}: usePaginationRangeProps) => {\n  const paginationRange = useMemo(() => {\n    const totalPageNumbers = buttonConst + 2 + siblingCount;\n\n    if (totalPageNumbers >= totalPageCount) {\n      return range(1, totalPageCount);\n    }\n\n    const leftSiblingIndex = Math.max(currentPage - siblingCount, 1);\n    const rightSiblingIndex = Math.min(\n      currentPage + siblingCount,\n      totalPageCount\n    );\n\n    const shouldShowLeftDots = leftSiblingIndex > 2\n    const shouldShowRightDots = rightSiblingIndex <= totalPageCount -2;\n\n    const firstPageIndex = 1\n    const lastPageIndex = totalPageCount;\n\n    if (!shouldShowLeftDots && shouldShowRightDots) {\n        let leftItemCount = 3 + 2 * siblingCount;\n        let leftRange = range(1, leftItemCount);\n  \n        return [...leftRange, DOTS, totalPageCount];\n      }\n  \n  \n      if (shouldShowLeftDots && !shouldShowRightDots) {\n        let rightItemCount = 3 + 2 * siblingCount;\n        let rightRange = range(\n          totalPageCount - rightItemCount + 1,\n          totalPageCount\n        );\n  \n        return [firstPageIndex, DOTS, ...rightRange];\n      }\n  \n  \n      if (shouldShowLeftDots && shouldShowRightDots) {\n        let middleRange = range(leftSiblingIndex, rightSiblingIndex);\n        return [firstPageIndex, DOTS, ...middleRange, DOTS, lastPageIndex];\n      }\n\n\n\n  }, [totalPageCount, siblingCount, currentPage, buttonConst]);\n  return paginationRange\n};\n"],"mappings":";AAAA,SAASA,OAAO,QAAQ,OAAO;AAG/B,OAAO,MAAMC,IAAI,GAAG,KAAK;AACzB,MAAMC,KAAK,GAAGA,CAACC,KAAa,EAAEC,GAAW,KAAK;EAC5C,IAAIC,MAAM,GAAGD,GAAG,GAAGD,KAAK,GAAG,CAAC;EAC5B,OAAOG,KAAK,CAACC,IAAI,CAAC;IAAEF;EAAO,CAAC,EAAE,CAACG,CAAC,EAAEC,KAAK,KAAKA,KAAK,GAAGN,KAAK,CAAC;AAC5D,CAAC;AAED,OAAO,MAAMO,kBAAkB,GAAGA,CAAC;EACjCC,cAAc;EACdC,WAAW;EACXC,YAAY;EACZC;AACuB,CAAC,KAAK;EAAAC,EAAA;EAC7B,MAAMC,eAAe,GAAGhB,OAAO,CAAC,MAAM;IACpC,MAAMiB,gBAAgB,GAAGL,WAAW,GAAG,CAAC,GAAGC,YAAY;IAEvD,IAAII,gBAAgB,IAAIN,cAAc,EAAE;MACtC,OAAOT,KAAK,CAAC,CAAC,EAAES,cAAc,CAAC;IACjC;IAEA,MAAMO,gBAAgB,GAAGC,IAAI,CAACC,GAAG,CAACN,WAAW,GAAGD,YAAY,EAAE,CAAC,CAAC;IAChE,MAAMQ,iBAAiB,GAAGF,IAAI,CAACG,GAAG,CAChCR,WAAW,GAAGD,YAAY,EAC1BF,cACF,CAAC;IAED,MAAMY,kBAAkB,GAAGL,gBAAgB,GAAG,CAAC;IAC/C,MAAMM,mBAAmB,GAAGH,iBAAiB,IAAIV,cAAc,GAAE,CAAC;IAElE,MAAMc,cAAc,GAAG,CAAC;IACxB,MAAMC,aAAa,GAAGf,cAAc;IAEpC,IAAI,CAACY,kBAAkB,IAAIC,mBAAmB,EAAE;MAC5C,IAAIG,aAAa,GAAG,CAAC,GAAG,CAAC,GAAGd,YAAY;MACxC,IAAIe,SAAS,GAAG1B,KAAK,CAAC,CAAC,EAAEyB,aAAa,CAAC;MAEvC,OAAO,CAAC,GAAGC,SAAS,EAAE3B,IAAI,EAAEU,cAAc,CAAC;IAC7C;IAGA,IAAIY,kBAAkB,IAAI,CAACC,mBAAmB,EAAE;MAC9C,IAAIK,cAAc,GAAG,CAAC,GAAG,CAAC,GAAGhB,YAAY;MACzC,IAAIiB,UAAU,GAAG5B,KAAK,CACpBS,cAAc,GAAGkB,cAAc,GAAG,CAAC,EACnClB,cACF,CAAC;MAED,OAAO,CAACc,cAAc,EAAExB,IAAI,EAAE,GAAG6B,UAAU,CAAC;IAC9C;IAGA,IAAIP,kBAAkB,IAAIC,mBAAmB,EAAE;MAC7C,IAAIO,WAAW,GAAG7B,KAAK,CAACgB,gBAAgB,EAAEG,iBAAiB,CAAC;MAC5D,OAAO,CAACI,cAAc,EAAExB,IAAI,EAAE,GAAG8B,WAAW,EAAE9B,IAAI,EAAEyB,aAAa,CAAC;IACpE;EAIJ,CAAC,EAAE,CAACf,cAAc,EAAEE,YAAY,EAAEC,WAAW,EAAEF,WAAW,CAAC,CAAC;EAC5D,OAAOI,eAAe;AACxB,CAAC;AAACD,EAAA,CArDWL,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}